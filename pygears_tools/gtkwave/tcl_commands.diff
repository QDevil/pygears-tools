31a32
> #include "ttranslate.h"
64,75d64
< static int gtkwavetcl_nop(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
< {
< (void)clientData;
< (void)interp;
< (void)objc;
< (void)objv;
< 
< /* nothing, this is simply to call gtk's main loop */
< gtkwave_main_iteration();
< return(TCL_OK);
< }
< 
109a99,115
> static int gtkwavetcl_nop(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
> {
>   (void)clientData;
>   (void)interp;
>   (void)objc;
>   (void)objv;
> 
>   kick_partial_vcd();
>   /* nothing, this is simply to call gtk's main loop */
>   gtkwave_main_iteration();
> 
>   TimeType value = GLOBALS->max_time;
>   return(gtkwavetcl_printTimeType(clientData, interp, objc, objv, value));
>   /* return(TCL_OK); */
> }
> 
> 
212a219,239
> 
> extern GtkWidget *top_table;
> extern GtkWidget *menubar;
> 
> static int gtkwavetcl_stripGUI(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
> {
>   if (GLOBALS->signalwindow) {
>     gtk_frame_set_label(GTK_FRAME(gtk_bin_get_child(GTK_BIN(GLOBALS->signalwindow))), NULL);
>   }
> 
>   if (GLOBALS->wavewindow) {
>     gtk_frame_set_label(GTK_FRAME(GLOBALS->wavewindow), NULL);
>   }
> 
> 	gtk_widget_hide(GTK_WIDGET(top_table));
> 	gtk_widget_hide(GTK_WIDGET(menubar));
> 
>   char *value = "Usli smo ovde\n";
>   return(gtkwavetcl_printString(clientData, interp, objc, objv, value));
> }
> 
1533a1561,1585
> #include <gdk/gdkx.h>
> static int gtkwavetcl_getGtkWindowID(ClientData clientData, Tcl_Interp *interp,
>                                     int objc, Tcl_Obj *CONST objv[]) {
>   Window root = GDK_WINDOW_XID(GTK_WIDGET(GLOBALS->mainwindow)->window);
>   char win_id[16];
>   sprintf(win_id, "%lu", root);
>   return(gtkwavetcl_printString(clientData, interp, objc, objv, win_id));
> }
> 
> static int gtkwavetcl_signalValueAt(ClientData clientData, Tcl_Interp *interp,
>                                     int objc, Tcl_Obj *CONST objv[]) {
>   char *sig_name = NULL ;
>   char val[2];
>   TimeType time;
> 
>   sig_name = get_Tcl_string(objv[1]);
>   if (objc == 2) {
>     time = MAX_HISTENT_TIME - 1;
>   } else {
>     time = atoi_64(get_Tcl_string(objv[2]));
>   }
>   signal_value_at(sig_name, val, time);
> 
>   return(gtkwavetcl_printString(clientData, interp, objc, objv, val));
> }
2180a2233
> 	{"stripGUI",		gtkwavetcl_stripGUI},
2181a2235,2236
> 	{"signalValueAt",                    gtkwavetcl_signalValueAt},
> 	{"getGtkWindowID",                    gtkwavetcl_getGtkWindowID},
